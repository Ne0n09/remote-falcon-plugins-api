name: Sync, Build, and Push Docker Image

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ORIGINAL_OWNER: Ne0n09                     # Upstream owner
  ORIGINAL_REPO: remote-falcon-plugins-api   # Upstream repo
  GHCR_NAMESPACE: sh-rf                      # Your GHCR namespace (lowercase)

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout your fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add upstream remote
        run: git remote add upstream https://github.com/${ORIGINAL_OWNER}/${ORIGINAL_REPO}.git

      - name: Fetch upstream changes
        run: git fetch upstream main

      - name: Merge upstream into fork
        id: merge
        run: |
          set -e
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          if git merge --no-commit --no-ff upstream/main; then
            echo "conflict=false" >> $GITHUB_OUTPUT
          else
            echo "conflict=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if no conflicts
        if: steps.merge.outputs.conflict == 'false'
        run: |
          git commit -m "Sync from upstream"
          git push origin main

      - name: Create pull request if conflicts
        if: steps.merge.outputs.conflict == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Merge upstream changes with conflicts"
          title: "Sync from upstream (manual merge required)"
          body: "Conflicts detected when syncing from upstream. Please review."
          branch: upstream-sync

  build:
    runs-on: ubuntu-latest
    needs: sync
    if: ${{ needs.sync.result == 'success' }}
    permissions:
      packages: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set variables
        id: vars
        run: |
          REPO_NAME=$(basename "${GITHUB_REPOSITORY}")
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

          SHORT_SHA=${GITHUB_SHA::7}
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

          DATE_TAG=$(TZ="America/Chicago" date +'%Y.%m.%d')
          echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT

          echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

          # Get last release tag
          LAST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.GHCR_NAMESPACE }}/${{ steps.vars.outputs.repo_name }}:latest
            ghcr.io/${{ env.GHCR_NAMESPACE }}/${{ steps.vars.outputs.repo_name }}:${{ steps.vars.outputs.date_tag }}
            ghcr.io/${{ env.GHCR_NAMESPACE }}/${{ steps.vars.outputs.repo_name }}:${{ steps.vars.outputs.short_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}

      - name: Get commit log since last release
        id: changelog
        run: |
          if [ -n "${{ steps.vars.outputs.last_tag }}" ]; then
            NOTES=$(git log ${{ steps.vars.outputs.last_tag }}..HEAD --pretty=format:"- %s" --reverse)
          else
            NOTES=$(git log --pretty=format:"- %s" --reverse)
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.date_tag }}
          name: Release ${{ steps.vars.outputs.date_tag }}
          body: ${{ steps.changelog.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create short hash tag
        run: |
          git tag ${{ steps.vars.outputs.short_sha }}
          git push origin ${{ steps.vars.outputs.short_sha }}
