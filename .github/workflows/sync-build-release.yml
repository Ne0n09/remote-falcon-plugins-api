name: Sync, Build, and Release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # Runs daily at 00:00 CST

env:
  ORIGINAL_OWNER: upstream-owner
  ORIGINAL_REPO: upstream-repo
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  TZ: America/Chicago

jobs:
  sync-build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: git remote add upstream https://github.com/${{ env.ORIGINAL_OWNER }}/${{ env.ORIGINAL_REPO }}.git

      - name: Fetch upstream
        run: git fetch upstream

      - name: Merge upstream changes
        id: merge
        run: |
          set +e
          git merge upstream/main --no-edit
          MERGE_STATUS=$?
          set -e
          echo "merge_status=$MERGE_STATUS" >> $GITHUB_OUTPUT

      - name: Handle merge conflicts (create PR)
        if: steps.merge.outputs.merge_status != '0'
        run: |
          echo "❌ Merge conflict detected. Creating PR..."
          BRANCH="sync-$(date +'%Y%m%d%H%M%S')"
          git merge --abort
          git checkout -b "$BRANCH"
          git fetch upstream
          git merge upstream/main || true
          git push origin "$BRANCH"
          gh pr create \
            --title "Sync from upstream" \
            --body "Automatic PR to sync with upstream changes." \
            --base main \
            --head "$BRANCH"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Commit sync changes
        if: steps.merge.outputs.merge_status == '0'
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -am "Sync from upstream"
            git push origin main
          else
            echo "✅ No upstream changes. Exiting."
            exit 0
          fi

      - name: Generate version tags
        if: steps.merge.outputs.merge_status == '0'
        id: version
        run: |
          DATE_TAG=$(date +'%Y.%m.%d')
          SHORT_HASH=$(git rev-parse --short HEAD)
          echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
          echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.merge.outputs.merge_status == '0'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker build -t ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.date_tag }}-${{ steps.version.outputs.short_hash }} .
          docker push ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.date_tag }}-${{ steps.version.outputs.short_hash }}

      - name: Create GitHub Release
        if: steps.merge.outputs.merge_status == '0'
        run: |
          COMMITS=$(git log origin/main ^upstream/main --pretty=format:"- %s (%h)")
          gh release create "${{ steps.version.outputs.date_tag }}" \
            --title "Release ${{ steps.version.outputs.date_tag }}" \
            --notes "$COMMITS"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
